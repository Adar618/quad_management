package com.quadmgmt.domain.service;
import com.quadmgmt.TestClockConfig; import com.quadmgmt.domain.model.Booking; import com.quadmgmt.persistence.repository.QuadBikeRepository; import org.junit.jupiter.api.*; import org.junit.jupiter.api.Nested; import org.junit.jupiter.api.extension.ExtendWith; import org.junit.jupiter.params.ParameterizedTest; import org.junit.jupiter.params.provider.MethodSource; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.context.annotation.Import; import org.springframework.test.context.junit.jupiter.SpringExtension; import org.springframework.transaction.annotation.Transactional; import java.time.*; import java.util.stream.Stream; import static org.junit.jupiter.api.Assertions.*;
@SpringBootTest @ExtendWith(SpringExtension.class) @Import(TestClockConfig.class) @Transactional
class BookingServiceEdgeCaseTests{
 @Autowired BookingService bookingService; @Autowired QuadBikeRepository quadBikeRepository; @Autowired Clock clock;
 private LocalDateTime base(){ return LocalDateTime.now(clock).plusHours(2);} 
 static Stream<org.junit.jupiter.params.provider.Arguments> invalidInputs(){ LocalDateTime now=LocalDateTime.of(2025,1,1,10,0); return Stream.of( org.junit.jupiter.params.provider.Arguments.of(null,1, now.plusHours(2), now.plusHours(3), IllegalArgumentException.class), org.junit.jupiter.params.provider.Arguments.of(2L,0, now.plusHours(2), now.plusHours(3), IllegalArgumentException.class), org.junit.jupiter.params.provider.Arguments.of(2L,-1, now.plusHours(2), now.plusHours(3), IllegalArgumentException.class), org.junit.jupiter.params.provider.Arguments.of(2L,1, null, now.plusHours(3), IllegalArgumentException.class), org.junit.jupiter.params.provider.Arguments.of(2L,1, now.plusHours(2), null, IllegalArgumentException.class), org.junit.jupiter.params.provider.Arguments.of(2L,1, now.plusHours(2), now.plusHours(2), IllegalArgumentException.class) ); }
 @ParameterizedTest @MethodSource("invalidInputs") void createBooking_rejectsInvalidInputs(Long userId,int qty, LocalDateTime s, LocalDateTime e, Class<? extends Exception> expected){ assertThrows(expected, ()-> bookingService.createBooking(userId, qty, s, e)); }
 @Test void cancelFreesInventory(){ var s=base(); var e=s.plusHours(2); long before=quadBikeRepository.countAvailableForRange(s,e); Booking b=bookingService.createBooking(2L,4,s,e); long during=quadBikeRepository.countAvailableForRange(s,e); assertEquals(before-4, during); bookingService.cancelBooking(b.getId()); long after=quadBikeRepository.countAvailableForRange(s,e); assertEquals(before, after); }
 @Nested class Idempotency{ @Test void doubleCancel_isSafe(){ var s=base(); var e=s.plusHours(1); Booking b=bookingService.createBooking(2L,1,s,e); bookingService.cancelBooking(b.getId()); assertDoesNotThrow(()-> bookingService.cancelBooking(b.getId())); } }
}
