package com.quadmgmt.persistence.repository;
import com.quadmgmt.TestClockConfig; import com.quadmgmt.domain.model.Booking; import com.quadmgmt.domain.model.QuadBike; import com.quadmgmt.domain.service.BookingService; import org.junit.jupiter.api.*; import org.junit.jupiter.api.extension.ExtendWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.context.annotation.Import; import org.springframework.data.domain.PageRequest; import org.springframework.test.context.junit.jupiter.SpringExtension; import org.springframework.transaction.annotation.Transactional; import java.time.*; import java.util.*; import static org.junit.jupiter.api.Assertions.*;
@SpringBootTest @ExtendWith(SpringExtension.class) @Import(TestClockConfig.class) @Transactional
class AvailabilityOverlapTests{
 @Autowired QuadBikeRepository quadBikeRepository; @Autowired BookingRepository bookingRepository; @Autowired BookingService bookingService; @Autowired Clock clock;
 private LocalDateTime base(){ return LocalDateTime.now(clock).plusHours(3);} 
 @Test void adjacentWindows_allowed(){ var s=base(); var e=s.plusHours(2); bookingService.createBooking(2L,5,s,e); List<QuadBike> before=quadBikeRepository.findAvailableForRange(s.minusHours(2), s, PageRequest.of(0,10)); assertEquals(10, before.size()); List<QuadBike> after=quadBikeRepository.findAvailableForRange(e, e.plusHours(2), PageRequest.of(0,10)); assertEquals(10, after.size()); }
 @Test void innerOuterOverlap_reduceAvailability(){ var s=base(); var e=s.plusHours(4); bookingService.createBooking(2L,7, s.plusHours(1), e.minusHours(1)); long count1=quadBikeRepository.countAvailableForRange(s.plusHours(2), e.minusHours(2)); assertEquals(3, count1); long count2=quadBikeRepository.countAvailableForRange(s, e); assertEquals(3, count2); }
 @Test void repositoryDistinctAndLimit(){ var s=base(); var e=s.plusHours(1); bookingService.createBooking(2L,3,s,e); List<QuadBike> limited=quadBikeRepository.findAvailableForRange(s,e, PageRequest.of(0,4)); assertTrue(limited.size() <= 4); Set<Long> ids=new HashSet<>(); for(QuadBike q: limited) ids.add(q.getId()); assertEquals(limited.size(), ids.size()); }
 @Test void bookingAssignsUniqueQuads(){ var s=base(); var e=s.plusHours(2); Booking b=bookingService.createBooking(2L,4,s,e); assertEquals(4, b.getQuads().size()); Set<Long> ids=new HashSet<>(); b.getQuads().forEach(q-> ids.add(q.getId())); assertEquals(4, ids.size()); }
}
